<?php

namespace AppBundle\Repository;

/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends \Doctrine\ORM\EntityRepository
{

public function getMarkersBetween($latLngArray)
    {
        $qb = $this->createQueryBuilder('o')
            ->select('o.lat, o.lng')
            ->where('o.lat > :southwestlat')
                ->setParameter('southwestlat', $latLngArray[1])
            ->andWhere('o.lat < :northeastlat')
                ->setParameter('northeastlat', $latLngArray[3])
            ->andWhere('o.lng > :southwestlng')
                ->setParameter('southwestlng', $latLngArray[0])
            ->andWhere('o.lng < :northeastlng')
                ->setParameter('northeastlng', $latLngArray[2])
        ;


        return $qb
            ->getQuery()
            ->getResult();

    }
    
    
	public function getObservationWithRelatedAves($nameBird, $statut) 
	{
    	$query = $this->getEntityManager()
        ->createQuery(
            'SELECT  partial o.{ id, date, lat, lng }, partial a.{ id,lbNom } as  FROM AppBundle:Observation o
            JOIN o.bird a
            WHERE a.lbNom = :name
            AND o.statut = :statut '
        )->setParameter('name', $nameBird)->setParameter('statut', $statut);

         try {
            return $query->getArrayResult();
         } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function countObservationsByStatut( $statut ){

        $qb = $this->createQueryBuilder('c')
            ->select( 'count( c.id )' )
            ->where( 'c.statut = :statut')
            ->setParameter('statut', $statut);
        return $qb->getQuery()
            ->getSingleScalarResult();


    }
}
